(function() {
  var AutoComplete, fs, helpers, os, path, uuid;

  fs = require('fs-plus');

  path = require('path');

  os = require('os');

  uuid = require('node-uuid');

  helpers = require('./spec-helper');

  AutoComplete = require('../lib/autocomplete');

  describe("autocomplete functionality", function() {
    beforeEach(function() {
      this.autoComplete = new AutoComplete(['taba', 'tabb', 'tabc']);
      this.testDir = path.join(os.tmpdir(), "atom-ex-mode-spec-" + (uuid.v4()));
      this.nonExistentTestDir = path.join(os.tmpdir(), "atom-ex-mode-spec-" + (uuid.v4()));
      this.testFile1 = path.join(this.testDir, "atom-ex-testfile-a.txt");
      this.testFile2 = path.join(this.testDir, "atom-ex-testfile-b.txt");
      return runs((function(_this) {
        return function() {
          fs.makeTreeSync(_this.testDir);
          fs.closeSync(fs.openSync(_this.testFile1, 'w'));
          fs.closeSync(fs.openSync(_this.testFile2, 'w'));
          spyOn(_this.autoComplete, 'resetCompletion').andCallThrough();
          spyOn(_this.autoComplete, 'getFilePathCompletion').andCallThrough();
          return spyOn(_this.autoComplete, 'getCommandCompletion').andCallThrough();
        };
      })(this));
    });
    afterEach(function() {
      return fs.removeSync(this.testDir);
    });
    describe("autocomplete commands", function() {
      beforeEach(function() {
        return this.completed = this.autoComplete.getAutocomplete('tab');
      });
      it("returns taba", function() {
        return expect(this.completed).toEqual('taba');
      });
      return it("calls command function", function() {
        return expect(this.autoComplete.getCommandCompletion.callCount).toBe(1);
      });
    });
    describe("autocomplete commands, then autoComplete again", function() {
      beforeEach(function() {
        this.completed = this.autoComplete.getAutocomplete('tab');
        return this.completed = this.autoComplete.getAutocomplete('tab');
      });
      it("returns tabb", function() {
        return expect(this.completed).toEqual('tabb');
      });
      return it("calls command function", function() {
        return expect(this.autoComplete.getCommandCompletion.callCount).toBe(1);
      });
    });
    describe("autocomplete directory", function() {
      beforeEach(function() {
        var filePath;
        filePath = path.join(os.tmpdir(), 'atom-ex-mode-spec-');
        return this.completed = this.autoComplete.getAutocomplete('tabe ' + filePath);
      });
      it("returns testDir", function() {
        var expected;
        expected = 'tabe ' + this.testDir + path.sep;
        return expect(this.completed).toEqual(expected);
      });
      return it("clears autocomplete", function() {
        return expect(this.autoComplete.resetCompletion.callCount).toBe(1);
      });
    });
    describe("autocomplete directory, then autocomplete again", function() {
      beforeEach(function() {
        var filePath;
        filePath = path.join(os.tmpdir(), 'atom-ex-mode-spec-');
        this.completed = this.autoComplete.getAutocomplete('tabe ' + filePath);
        return this.completed = this.autoComplete.getAutocomplete(this.completed);
      });
      it("returns test file 1", function() {
        return expect(this.completed).toEqual('tabe ' + this.testFile1);
      });
      return it("lists files twice", function() {
        return expect(this.autoComplete.getFilePathCompletion.callCount).toBe(2);
      });
    });
    describe("autocomplete full directory, then autocomplete again", function() {
      beforeEach(function() {
        var filePath;
        filePath = path.join(this.testDir, 'a');
        this.completed = this.autoComplete.getAutocomplete('tabe ' + filePath);
        return this.completed = this.autoComplete.getAutocomplete(this.completed);
      });
      it("returns test file 2", function() {
        return expect(this.completed).toEqual('tabe ' + this.testFile2);
      });
      return it("lists files once", function() {
        return expect(this.autoComplete.getFilePathCompletion.callCount).toBe(1);
      });
    });
    describe("autocomplete non existent directory", function() {
      beforeEach(function() {
        return this.completed = this.autoComplete.getAutocomplete('tabe ' + this.nonExistentTestDir);
      });
      return it("returns no completions", function() {
        var expected;
        expected = '';
        return expect(this.completed).toEqual(expected);
      });
    });
    return describe("autocomplete existing file as directory", function() {
      beforeEach(function() {
        var filePath;
        filePath = this.testFile1 + path.sep;
        return this.completed = this.autoComplete.getAutocomplete('tabe ' + filePath);
      });
      return it("returns no completions", function() {
        var expected;
        expected = '';
        return expect(this.completed).toEqual(expected);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
